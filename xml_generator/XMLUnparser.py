# Generated by Grammarinator 19.3

from itertools import chain
from grammarinator.runtime import *

import XMLUnlexer


class XMLUnparser(Grammarinator):

    def __init__(self, unlexer):
        super(XMLUnparser, self).__init__()
        self.unlexer = unlexer
    @depthcontrol
    def document(self):
        current = self.create_node(UnparserRule(name='document'))
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.prolog()

        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_more():
                current += self.misc()

        current += self.element()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_more():
                current += self.misc()

        return current
    document.min_depth = 3

    @depthcontrol
    def prolog(self):
        current = self.create_node(UnparserRule(name='prolog'))
        current += self.unlexer.XMLDeclOpen()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_more():
                current += self.attribute()

        current += self.unlexer.SPECIAL_CLOSE()
        return current
    prolog.min_depth = 2

    @depthcontrol
    def content(self):
        current = self.create_node(UnparserRule(name='content'))
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.chardata()

        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [3, 3, 1, 1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_72', i), 1) for i, w in enumerate([1, 1, 1, 1, 1])])
                self.unlexer.weights[('alt_72', choice)] = self.unlexer.weights.get(('alt_72', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.element()
                elif choice == 1:
                    current += self.reference()
                elif choice == 2:
                    current += self.unlexer.CDATA()
                elif choice == 3:
                    current += self.unlexer.PI()
                elif choice == 4:
                    current += self.unlexer.COMMENT()
                if self.unlexer.max_depth >= 2:
                    for _ in self.zero_or_one():
                        current += self.chardata()


        return current
    content.min_depth = 0

    @depthcontrol
    def element(self):
        current = self.create_node(UnparserRule(name='element'))
        choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_79', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_79', choice)] = self.unlexer.weights.get(('alt_79', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='<'))
            current += self.unlexer.Name()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_more():
                    current += self.attribute()

            current += self.create_node(UnlexerRule(src='>'))
            current += self.content()
            current += self.create_node(UnlexerRule(src='<'))
            current += self.create_node(UnlexerRule(src='/'))
            current += self.unlexer.Name()
            current += self.create_node(UnlexerRule(src='>'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='<'))
            current += self.unlexer.Name()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_more():
                    current += self.attribute()

            current += self.create_node(UnlexerRule(src='/>'))
        return current
    element.min_depth = 2

    @depthcontrol
    def reference(self):
        current = self.create_node(UnparserRule(name='reference'))
        choice = self.choice([0 if [3, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_91', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_91', choice)] = self.unlexer.weights.get(('alt_91', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.EntityRef()
        elif choice == 1:
            current += self.unlexer.CharRef()
        return current
    reference.min_depth = 2

    @depthcontrol
    def attribute(self):
        current = self.create_node(UnparserRule(name='attribute'))
        current += self.unlexer.Name()
        current += self.create_node(UnlexerRule(src='='))
        current += self.unlexer.STRING()
        return current
    attribute.min_depth = 2

    @depthcontrol
    def chardata(self):
        current = self.create_node(UnparserRule(name='chardata'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_95', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_95', choice)] = self.unlexer.weights.get(('alt_95', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.TEXT()
        elif choice == 1:
            current += self.unlexer.SEA_WS()
        return current
    chardata.min_depth = 1

    @depthcontrol
    def misc(self):
        current = self.create_node(UnparserRule(name='misc'))
        choice = self.choice([0 if [1, 1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_98', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_98', choice)] = self.unlexer.weights.get(('alt_98', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.COMMENT()
        elif choice == 1:
            current += self.unlexer.PI()
        elif choice == 2:
            current += self.unlexer.SEA_WS()
        return current
    misc.min_depth = 1

    default_rule = document

