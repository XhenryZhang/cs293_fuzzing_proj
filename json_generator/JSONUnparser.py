# Generated by Grammarinator 19.3

from itertools import chain
from grammarinator.runtime import *

import JSONUnlexer


class JSONUnparser(Grammarinator):

    def __init__(self, unlexer):
        super(JSONUnparser, self).__init__()
        self.unlexer = unlexer
    @depthcontrol
    def json(self):
        current = self.create_node(UnparserRule(name='json'))
        choice = self.choice([0 if [2, 2, 2, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_22', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_22', choice)] = self.unlexer.weights.get(('alt_22', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.value1()
        elif choice == 1:
            current += self.value2()
        elif choice == 2:
            current += self.value3()
        elif choice == 3:
            current += self.basic()
        return current
    json.min_depth = 1

    @depthcontrol
    def basic(self):
        current = self.create_node(UnparserRule(name='basic'))
        choice = self.choice([0 if [1, 2, 0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_27', i), 1) for i, w in enumerate([1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_27', choice)] = self.unlexer.weights.get(('alt_27', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.STRING()
        elif choice == 1:
            current += self.unlexer.NUMBER()
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='true'))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src='false'))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src='null'))
        return current
    basic.min_depth = 0

    @depthcontrol
    def obj(self):
        current = self.create_node(UnparserRule(name='obj'))
        choice = self.choice([0 if [3, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_36', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_36', choice)] = self.unlexer.weights.get(('alt_36', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='{'))
            current += self.pair()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_more():
                    current += self.create_node(UnlexerRule(src=','))
                    current += self.pair()

            current += self.create_node(UnlexerRule(src='}'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='{'))
            current += self.create_node(UnlexerRule(src='}'))
        return current
    obj.min_depth = 0

    @depthcontrol
    def pair(self):
        current = self.create_node(UnparserRule(name='pair'))
        current += self.unlexer.STRING()
        current += self.create_node(UnlexerRule(src=':'))
        current += self.json()
        return current
    pair.min_depth = 2

    @depthcontrol
    def arr(self):
        current = self.create_node(UnparserRule(name='arr'))
        choice = self.choice([0 if [2, 2, 2, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_46', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_46', choice)] = self.unlexer.weights.get(('alt_46', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='['))
            current += self.json()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_more():
                    current += self.create_node(UnlexerRule(src=','))
                    current += self.json()

            current += self.create_node(UnlexerRule(src=']'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='['))
            current += self.json()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_more():
                    current += self.create_node(UnlexerRule(src=','))
                    current += self.json()

            current += self.create_node(UnlexerRule(src=']'))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='['))
            current += self.json()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_more():
                    current += self.create_node(UnlexerRule(src=','))
                    current += self.json()

            current += self.create_node(UnlexerRule(src=']'))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src='['))
            current += self.create_node(UnlexerRule(src=']'))
        return current
    arr.min_depth = 0

    @depthcontrol
    def value1(self):
        current = self.create_node(UnparserRule(name='value1'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_65', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_65', choice)] = self.unlexer.weights.get(('alt_65', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.obj()
        elif choice == 1:
            current += self.arr()
        return current
    value1.min_depth = 1

    @depthcontrol
    def value2(self):
        current = self.create_node(UnparserRule(name='value2'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_68', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_68', choice)] = self.unlexer.weights.get(('alt_68', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.obj()
        elif choice == 1:
            current += self.arr()
        return current
    value2.min_depth = 1

    @depthcontrol
    def value3(self):
        current = self.create_node(UnparserRule(name='value3'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_71', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_71', choice)] = self.unlexer.weights.get(('alt_71', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.obj()
        elif choice == 1:
            current += self.arr()
        return current
    value3.min_depth = 1

    default_rule = json

